# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f009ea47-5fc6-4a29-8099-b3000b951482'
  imageRepositoryApiUserJava: 'karlosarr/api-user-java'
  imageRepositoryApiPio: 'karlosarr/api-poi'
  imageRepositoryApiTrip: 'karlosarr/api-trip'
  imageRepositoryApiUserProfile: 'karlosarr/api-userprofile'
  containerRegistry: 'openhackb4i6acr.azurecr.io'
  dockerfilePathApiUserJava: '$(Build.SourcesDirectory)/apis/user-java/Dockerfile'
  dockerfilePathApiPio: 'apis/poi/web/Dockerfile'
  dockerfilePathApiTrip: 'apis/trips/Dockerfile'
  dockerfilePathApiUserProfile: 'apis/userprofile/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:

- stage: BuildMobileApps
  displayName: Mobile Apps
  jobs:
  - job: Android
    displayName: Build Android
    pool:
      vmImage: 'VS2017-Win2017'
    steps:

      - task: NuGetToolInstaller@0
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: 'MobileApps/MyDriving.XS.sln'
          feedsToUse: 'select'
      - task: XamarinAndroid@1
        inputs:
          projectFile: '$(Build.SourcesDirectory)/MobileApps/MyDriving/MyDriving.Android/MyDriving.Android.csproj'
          outputDirectory: '$(outputDirectory)'
          configuration: '$(buildConfiguration)'
          jdkOption: 'JDKVersion'
      - task: AndroidSigning@3
        inputs:
          apksign: false
          zipalign: false
          apkFiles: '$(outputDirectory)/*.apk'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(outputDirectory)'

- stage: BuildApiPio
  displayName: Api Pio
  jobs:
  - job: UnitTesting
    displayName: Unit Testing
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        workingDirectory: 'apis/poi'
  - job: Build
    displayName: Api Pio
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageRepositoryApiPio)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePathApiPio)'
        tags: '$(tag)'
    - task: HelmInstaller@1
      displayName: Helm Install
      inputs:
        helmVersionToInstall: '2.14.1'
    - task: HelmDeploy@0
      displayName: Helm Package
      inputs:
        command: 'package'
        chartPath: 'apis/poi/charts/mydrive-poi'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    
- stage: BuildApiUserJava
  displayName: Api User Java
  jobs:
  - job: UnitTesting
    displayName: Unit Testing
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'apis/user-java/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'testpractice'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
  - job: BuildApiUserJava
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'apis/user-java/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'testpractice'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageRepositoryApiUserJava)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePathApiUserJava)'
        tags: '$(tag)'
    - task: HelmInstaller@1
      displayName: Helm Install
      inputs:
        helmVersionToInstall: '2.14.1'
    - task: HelmDeploy@0
      displayName: Helm Package
      inputs:
        command: 'package'
        chartPath: 'apis/user-java/charts/mydrive-user-java'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- stage: BuildApiTrip
  displayName: Api Trip
  jobs:
  - job: UnitTesting
    displayName: Unit Testing
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: GoTool@0
      inputs:
        version: '1.10'
    #- task: Go@0
    #  inputs:
    #    command: 'test'
    #    workingDirectory: '$(Build.SourcesDirectory)/apis/trips/test'
  - job: Build
    displayName: Api Trip
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageRepositoryApiTrip)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePathApiTrip)'
        tags: '$(tag)'
    - task: HelmInstaller@1
      displayName: Helm Install
      inputs:
        helmVersionToInstall: '2.14.1'
    - task: HelmDeploy@0
      displayName: Helm Package
      inputs:
        command: 'package'
        chartPath: 'apis/trips/charts/mydrive-trips/'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
- stage: BuildApiUserProfile
  displayName: Api User Profile
  jobs:
  - job: UnitTesting
    displayName: Unit Testing
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: 'apis/userprofile/'
  - job: Build
    displayName: Api User Profile
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageRepositoryApiUserProfile)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePathApiUserProfile)'
        tags: '$(tag)'
    - task: HelmInstaller@1
      displayName: Helm Install
      inputs:
        helmVersionToInstall: '2.14.1'
    - task: HelmDeploy@0
      displayName: Helm Package
      inputs:
        command: 'package'
        chartPath: 'apis/userprofile/charts/mydrive-user/'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
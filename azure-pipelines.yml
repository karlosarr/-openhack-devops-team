# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f009ea47-5fc6-4a29-8099-b3000b951482'
  imageRepository: 'devopsoh/api-user-java'
  containerRegistry: 'openhackb4i6acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/user-java/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: UnitTesting
  displayName: Unit testing 
  jobs:  
  - job: UnitTesting
    displayName: Unittesting
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'apis/user-java/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'testpractice'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    #- task: CreateWorkItem@1
    #  condition: failed()
    #  inputs:
    #    workItemType: 'Bug'
    #    title: 'Bug on failed testing'
    
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        #repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        #containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: HelmInstaller@1
      displayName: Helm Install
      inputs:
        helmVersionToInstall: '2.14.1'
    - task: HelmDeploy@0
      displayName: Helm Package
      inputs:
        command: 'package'
        chartPath: 'apis/user-java/charts/mydrive-user-java'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'